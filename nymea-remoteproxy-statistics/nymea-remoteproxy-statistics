#!/usr/bin/env python

# -*- coding: UTF-8 -*-

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                                                                             #
#  Copyright (C) 2018 Simon Stuerz <simon.stuerz@guh.io>                      #
#                                                                             #
#  This file is part of nymea-remoteproxy.                                    #
#                                                                             #
#  nymea-remoteproxy is free software: you can redistribute it and/or modi    #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, version 3 of the License.                    #
#                                                                             #
#  nymea-remoteproxy is distributed in the hope that it will be useful,       #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with nymea-remoteproxy. If not, see <http://www.gnu.org/licenses/>.  #
#                                                                             #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


import sys
import os
import shutil
import traceback
import argparse
import Gnuplot
import time
import datetime

__version__ = "0.1.1"

# Report time string
reportStartTimeString = ""
reportEndTimeString = ""

# Statitsitcs data
hourlyTunnelsList = []
userList = []

# Count variables
totalUserCount = 0
totalConnectionCount = 0
totalTunnelTraffic = 0
totalTunnelCount = 0
totalTunnelDuration = 0


#--------------------------------------------------------------------------
def printInfo(info):
    print('[+] ' + info)


#--------------------------------------------------------------------------
def printWarning(warning):
    print('[-] Warning: ' + warning)


#--------------------------------------------------------------------------
def printError(error):
    print('[!] Error: ' + error)


#--------------------------------------------------------------------------------
def humanReadableSize(sizeBytes):
    if sizeBytes == 1:
        return "1 byte"

    suffixesTable = [('bytes',0),('KB',0),('MB',1),('GB',2),('TB',2), ('PB',2)]

    num = float(sizeBytes)
    for suffix, precision in suffixesTable:
        if num < 1024.0:
            break
        num /= 1024.0

    if precision == 0:
        formattedSize = "%d" % num
    else:
        formattedSize = str(round(num, ndigits=precision))

    return "%s %s" % (formattedSize, suffix)


#--------------------------------------------------------------------------------
def convertLineToTimezone(line, timezoneString):
    if timezone is "UTC":
        return line

    lineTokens = line.split(' ')
    printInfo("Line tokens", lineTokens)
    timestamp = lineTokens[0]
    utcTime = datetime.datetime.utcfromtimestamp(int(timestamp))
    printInfo("Convert timestamp", timestamp, utcTime.strftime("%Y.%m.%d %H:%M:%S (%Z)") , "to timezone", timezoneString)

    timezoneObject = pytz.timezone(timezoneString)
    timezoneOffset = timezoneObject.utcoffset()
    convertedTimestamp = timezoneObject.localize(utcTime)
    printInfo("Result", timezoneOffset, utcTime.strftime("%Y-%m-%d %H:%M:%S.%f%z (%Z)"), "-->", convertedTimestamp.strftime("%Y-%m-%d %H:%M:%S.%f%z (%Z)"))


#--------------------------------------------------------------------------------
def prepareWorkingDirectory():
    
    global reportStartTimeString
    global reportEndTimeString

    printInfo("Prepare working directory %s" % workDirectory)

    if os.path.isdir(workDirectory):
        printInfo("Clean up old working directory.")
        shutil.rmtree(workDirectory)

    os.makedirs(workDirectory)

    tunnelLogFiles = []
    statisticsLogFiles = []

    # Read the file list
    printInfo("Reading files from %s" % logDirectory)
    for fileName in os.listdir(logDirectory):
        if "nymea-remoteproxy-tunnels" in fileName:
            tunnelLogFiles.append(fileName)

        if "nymea-remoteproxy-statistics" in fileName:
            statisticsLogFiles.append(fileName)

    # Sort file lists for beeing able to get the last n days logs
    tunnelLogFiles.sort()
    statisticsLogFiles.sort()

    # Write data file for processing
    if not useAllLogs:
        tunnelLogFiles = tunnelLogFiles[-(daysCount + 1):]
    
    tunnelOutputFile = open(tunnelOutputFileName, "a")

    for fileName in sorted(tunnelLogFiles):
        printInfo("%s" % fileName)
        inputFile = open(logDirectory + "/" + fileName)
        for line in inputFile.readlines():
            tunnelOutputFile.write(line)

    tunnelOutputFile.close()

    if not useAllLogs:
        statisticsLogFiles = statisticsLogFiles[-(daysCount + 1):]
    
    statisticsOutputFile = open(statisticsOutputFileName, "a")

    for fileName in sorted(statisticsLogFiles):
        printInfo("%s" % fileName)
        inputFile = open(logDirectory + "/" + fileName)
        for line in inputFile.readlines():
            statisticsOutputFile.write(line)

    statisticsOutputFile.close()

    # Get the start and entime for this report
    statisticsOutputFile = open(statisticsOutputFileName, "r")
    lineList = statisticsOutputFile.readlines()
    statisticsOutputFile.close()
    
    firstLine = lineList[0]
    lastLine = lineList[-1]

    printInfo("First line '%s'" % firstLine)
    lineTokens = firstLine.split(' ')
    utcTime = datetime.datetime.utcfromtimestamp(int(lineTokens[0]))
    reportStartTimeString = utcTime.strftime("%d.%m.%Y %H:%M:%S")
    
    printInfo("Last line '%s'" % lastLine)
    lineTokens = lastLine.split(' ')
    utcTime = datetime.datetime.utcfromtimestamp(int(lineTokens[0]))
    reportEndTimeString = utcTime.strftime("%d.%m.%Y %H:%M:%S")
    
    printInfo("Statistics time window %s - %s" % (reportStartTimeString, reportEndTimeString))
            
    
#--------------------------------------------------------------------------------
def createStatistics():
    # Global variables
    global reportStartTimeString
    global reportEndTimeString

    global hourlyTunnelsList
    global userList

    global totalUserCount
    global totalConnectionCount
    global totalTunnelTraffic
    global totalTunnelCount
    global totalTunnelDuration 

    printInfo("Create statistics out of data")

    statisticsFile = open(workDirectory + "/statistics.dat", "r")
    tunnelsFile = open(workDirectory + "/tunnels.dat", "r")

    # Init lists
    for x in range(0, 24):
        hourlyTunnelsList.append(0)

    printInfo("Initialized hour statistics %s" % hourlyTunnelsList)

    # <timestamp> <tunnel creation timestamp> <user name> <first client address> <second client addrees> <total tunnel traffic>

    # Walk trough lines and calculate statistics
    for line in tunnelsFile.readlines():
        lineTokens = line.split(' ')
        # print("Line tokens: %s" % lineTokens)
        tunnelCloseTime = int(lineTokens[0])
        tunnelCreationTime = int(lineTokens[1])
        tunnelUser = lineTokens[2]
        tunnelTraffic = int(lineTokens[5])
        tunnelDuration = tunnelCloseTime - tunnelCreationTime;
        
        # Fixme: get hash for this user
        if ignoreJenkins and tunnelUser == "jenkins@guh.io":
            continue
        
        
        utcTime = datetime.datetime.utcfromtimestamp(int(tunnelCreationTime))
        creationTimeString = utcTime.strftime("%Y.%m.%d %H:%M:%S (%Z)")
        creationHour = int(utcTime.strftime("%H"))
        
        hourlyTunnelsList[creationHour] = hourlyTunnelsList[creationHour] + 1
        
        if not tunnelUser in userList:
            userList.append(tunnelUser)
        
        totalTunnelCount += 1
        totalTunnelDuration += tunnelDuration
        totalTunnelTraffic += tunnelTraffic
        totalUserCount = len(userList)
        
        #printInfo("User: %s %s -> %s -> Duration: %s -> Traffic %s" % (tunnelUser, creationTimeString, creationHour, tunnelDuration, tunnelTraffic))   

    
    printInfo("-----------------------------------------------------------------------")
    printInfo("Statistics time window %s - %s" % (reportStartTimeString, reportEndTimeString))
    printInfo("Hourly statistics:   %s" % hourlyTunnelsList)
    printInfo("User count:          %s" % totalUserCount)
    printInfo("Tunnel count:        %s" % totalTunnelCount)
    printInfo("Tunnel durations:    %s [s]" % totalTunnelDuration)
    printInfo("Tunnel traffic:      %s [B] %s" % (totalTunnelTraffic, humanReadableSize(totalTunnelTraffic)))
    printInfo("-----------------------------------------------------------------------")

    hourlyFile = open(workDirectory + "/hourly.dat", "a")
    for x in range(0, 24):
        line = "%s %s\n" % (x, hourlyTunnelsList[x])
        hourlyFile.write(line)

    

#--------------------------------------------------------------------------------
def plotHourlyStatistics():
    global reportStartTimeString
    global reportEndTimeString

    printInfo("Create houly plots into %s" % workDirectory)

    plot = Gnuplot.Gnuplot()
    plot.title("Hourly connections %s - %s" % (reportStartTimeString, reportEndTimeString))
    plot.xlabel("Time")
    plot.ylabel("Count")

    plot("set term png enhanced font 'Ubuntu,12' size %s, %s" % (imageWidth, imageHeight))
    plot("set output '%s'" % (workDirectory + "/hourly.png"))
    plot("set xrange [0:23]")
    plot("set xtics 1")
    plot("set yrange [0:*]")
    plot("set grid")
    plot("plot '%s' using 1:2 smooth cspline title 'Tunnels'" % (workDirectory + "/hourly.dat"))


#--------------------------------------------------------------------------------
def plotStatistics():
    global reportStartTimeString
    global reportEndTimeString

    printInfo("Create statistics plots into %s" % workDirectory)

    plot = Gnuplot.Gnuplot()
    plot.title("Server connections %s - %s" % (reportStartTimeString, reportEndTimeString))
    plot.xlabel("Time")
    plot.ylabel("Count")

    plot("set term png enhanced font 'Ubuntu,12' size %s, %s" % (imageWidth, imageHeight))
    plot("set output '%s'" % (workDirectory + "/statistics.png"))
    plot("set xdata time")
    plot("set timefmt '%s'")
    plot("set xtics format '%d.%m.%y %H:%M:%S'")
    plot("set yrange [0:*]")
    plot("set grid")
    plot("plot '%s' using 1:2 with lines title 'Tunnels',"
         "     '%s' using 1:3 with lines title 'Connections'" % (workDirectory + "/statistics.dat", workDirectory + "/statistics.dat"))


def sendReportMail():
    printInfo("Sending report email")
    
    
    


#--------------------------------------------------------------------------------
# Main
#--------------------------------------------------------------------------------

if __name__ == "__main__":

    # Process arguments
    parser = argparse.ArgumentParser(description='The nymea-remoteproxy-statistics tool allowes to process the log files and create statistic reports.')
    parser.add_argument('-a', '--all', action='store_true', help='create the statistic of all available log files. This parameter overrides the \"-d, --days\" paramter.')
    parser.add_argument('-i', '--ignorejenkins', action='store_true', help='ignore the logs from the jenkins tests.')
    parser.add_argument('-v','--version', action='version', version=__version__)
    parser.add_argument('-l', '--logs', metavar='DIR', type=str, default='/var/log', help='the path to the log directoy of the nymea-remoteproxy server. Default is "/var/log".')
    parser.add_argument('-d', '--days', metavar='DAYS', type=int, default='1', help='the amount of past days included into the report. Default is 1.')
    parser.add_argument('--width', metavar='WIDTH', type=int, default='2000', help='the width of the plot images. Default is 2000.')
    parser.add_argument('--height', metavar='HEIGHT', type=int, default='1000', help='the height of the plot images. Default is 1000.')
    # parser.add_argument('-t', '--timezone', metavar='ZONE', type=str, default='UTC', help='the timezone the statistics should be created for. Default is UTC.')
    args = parser.parse_args()

    # Variables
    daysCount = args.days
    imageWidth = args.width
    imageHeight = args.height
    logDirectory = os.path.abspath(args.logs)
    ignoreJenkins = args.ignorejenkins
    useAllLogs = args.all
    workDirectory = os.path.abspath("/tmp/nymea-remoteproxy-statistics")
    timezone = "UTC"

    # Final logs for parsing
    tunnelOutputFileName = workDirectory + "/tunnels.dat"
    statisticsOutputFileName = workDirectory + "/statistics.dat"

    printInfo("-----------------------------------------------------------------------")
    printInfo("Using log dir %s" % logDirectory)
    printInfo("Using working dir %s" % workDirectory)
    
    if useAllLogs:
        printInfo("Using all available logs")
    else:
        printInfo("Amount of days for report: %s" % daysCount)
        
        
    if ignoreJenkins:
        printInfo("Ignore jenkins user from tests.")
    else:
        printInfo("Logs include connections from jenkins user from tests.")
   
    printInfo("Image size: %sx%s" % (imageWidth, imageHeight))
    printInfo("-----------------------------------------------------------------------")

    prepareWorkingDirectory()
    createStatistics()
    plotStatistics()
    plotHourlyStatistics()

